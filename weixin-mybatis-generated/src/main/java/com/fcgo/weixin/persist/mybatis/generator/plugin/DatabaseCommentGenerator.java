package com.fcgo.weixin.persist.mybatis.generator.plugin;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.mybatis.generator.api.CommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.CompilationUnit;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.InnerClass;
import org.mybatis.generator.api.dom.java.InnerEnum;
import org.mybatis.generator.api.dom.java.JavaElement;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.config.PropertyRegistry;

public class DatabaseCommentGenerator implements CommentGenerator {

    private Properties properties = new Properties();
    private boolean suppressDate;
    private boolean suppressAllComments;

    Map<String, Comment> columnComments = new HashMap<String, Comment>();

    public DatabaseCommentGenerator() {
        super();
        suppressAllComments = false;
        suppressDate = false;
    }

    public boolean isSuppressDate() {
        return suppressDate;
    }

    public boolean isSuppressAllComments() {
        return suppressAllComments;
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
        innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerClass.addJavaDocLine(sb.toString());

        addJavadocTag(innerClass, false);

        innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) {
        if (suppressAllComments) {
            return;
        }

        StringBuilder sb = new StringBuilder();

        innerClass.addJavaDocLine("/**"); //$NON-NLS-1$
        innerClass.addJavaDocLine(" * This class was generated by MyBatis Generator."); //$NON-NLS-1$

        sb.append(" * This class corresponds to the database table "); //$NON-NLS-1$
        sb.append(introspectedTable.getFullyQualifiedTable());
        innerClass.addJavaDocLine(sb.toString());

        addJavadocTag(innerClass, markAsDoNotDelete);

        innerClass.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addComment(XmlElement xmlElement) {
        return;
    }

    @Override
    public void addConfigurationProperties(Properties properties) {
        this.properties.putAll(properties);
        suppressDate = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));
        suppressAllComments = isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));
    }

    public static boolean isTrue(String s) {
        return "true".equalsIgnoreCase(s);
    }

    @Override
    public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) {
        return;
    }

    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable) {
        if (suppressAllComments) {
            return;
        }

        field.addJavaDocLine("/**"); //$NON-NLS-1$
        field.addJavaDocLine(introspectedTable.getFullyQualifiedTable().getFullyQualifiedTableNameAtRuntime()); //$NON-NLS-1$
        addJavadocTag(field, false);
        field.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) {
        if (suppressAllComments) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        field.addJavaDocLine("/**"); //$NON-NLS-1$
        sb.setLength(0);
        Comment comment =
                getColumnComment(introspectedTable.getFullyQualifiedTable().toString(),
                        introspectedColumn.getActualColumnName(), introspectedColumn.getRemarks());
        sb.append(" * ").append(comment.mainRemark);
        field.addJavaDocLine(sb.toString());
        if (comment.sideRemark != null) {
            sb.setLength(0);
            sb.append(" * ").append(comment.sideRemark);
            field.addJavaDocLine(sb.toString());
        }
        sb.setLength(0);
        sb.append(" * column: ").append(introspectedTable.getFullyQualifiedTable()).append('.')
                .append(introspectedColumn.getActualColumnName());
        field.addJavaDocLine(sb.toString());
        addJavadocTag(field, false);
        field.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    /**
     * @param table
     * @param column
     * @param remark
     * @return
     */
    private Comment getColumnComment(String table, String column, String remark) {
        StringBuilder builder = new StringBuilder();
        builder.append(table).append(".").append(column);
        String key = builder.toString();
        Comment comment = columnComments.get(key);
        if (comment == null) {
            comment = new Comment();
            if (remark != null) {
                if (remark.indexOf('(') > 0) {
                    comment.mainRemark = remark.substring(0, remark.indexOf('('));
                    comment.sideRemark = remark.substring(remark.indexOf('(') + 1, remark.indexOf(')'));
                }
                else {
                    comment.mainRemark = remark;
                }
                columnComments.put(key, comment);
            }
        }
        return comment;

    }

    @Override
    public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) {
        return;
    }

    @Override
    public void addGetterComment(Method method, IntrospectedTable introspectedTable,
            IntrospectedColumn introspectedColumn) {
        // if (suppressAllComments) {
        // return;
        // }
        // Comment comment =
        // getColumnComment(introspectedTable.toString(), introspectedColumn.getActualColumnName(),
        // introspectedColumn.getRemarks());
        // StringBuilder sb = new StringBuilder();
        // method.addJavaDocLine("/**");
        // sb.append(" * �年").append(comment.mainRemark);
        // method.addJavaDocLine(sb.toString());
        // if (comment.hasSideRemark()) {
        // sb.setLength(0);
        // sb.append(" * ").append(comment.sideRemark);
        // method.addJavaDocLine(sb.toString());
        // }
        // sb.setLength(0);
        // sb.append(" * database column ").append(introspectedTable.getFullyQualifiedTable()).append('.')
        // .append(introspectedColumn.getActualColumnName());
        // method.addJavaDocLine(sb.toString());
        // method.addJavaDocLine(" * ");
        // sb.setLength(0);
        //        sb.append(" * @return  "); //$NON-NLS-1$
        // sb.append(comment.mainRemark);
        // method.addJavaDocLine(sb.toString());
        // addJavadocTag(method, false);
        //        method.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    @Override
    public void addJavaFileComment(CompilationUnit compilationUnit) {
        return;
    }

    @Override
    public void addRootComment(XmlElement rootElement) {
        return;
    }

    @Override
    public void addSetterComment(Method method, IntrospectedTable introspectedTable,
            IntrospectedColumn introspectedColumn) {
        // if (suppressAllComments) {
        // return;
        // }
        // Comment comment =
        // getColumnComment(introspectedTable.toString(), introspectedColumn.getActualColumnName(),
        // introspectedColumn.getRemarks());
        // StringBuilder sb = new StringBuilder();
        //        method.addJavaDocLine("/**"); //$NON-NLS-1$
        // sb.append(" * 夾浬 ").append(comment.mainRemark);
        // method.addJavaDocLine(sb.toString());
        // if (comment.hasSideRemark()) {
        // sb.setLength(0);
        // sb.append(" * ").append(comment.sideRemark);
        // method.addJavaDocLine(sb.toString());
        // }
        // sb.setLength(0);
        //        method.addJavaDocLine(" * "); //$NON-NLS-1$
        // Parameter parm = method.getParameters().get(0);
        //        sb.append(" * @param "); //$NON-NLS-1$
        // sb.append(parm.getName());
        //        sb.append(" "); //$NON-NLS-1$
        // sb.append(introspectedTable.getFullyQualifiedTable());
        // sb.append('.');
        // sb.append(introspectedColumn.getActualColumnName());
        // method.addJavaDocLine(sb.toString());
        // addJavadocTag(method, false);
        //        method.addJavaDocLine(" */"); //$NON-NLS-1$
    }

    protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete) {
        StringBuilder sb = new StringBuilder();
        if (markAsDoNotDelete) {
            javaElement.addJavaDocLine(" *"); //$NON-NLS-1$
            sb.append(" * ");
            sb.append(" do_not_delete_during_merge"); //$NON-NLS-1$
        }
        String s = getDateString();
        if (s != null) {
            sb.append(' ');
            sb.append(s);
            javaElement.addJavaDocLine(sb.toString());
        }
    }

    protected String getDateString() {
        if (suppressDate) {
            return null;
        }
        else {
            return new Date().toString();
        }
    }

    private static class Comment {
        private String mainRemark;
        private String sideRemark;

        public boolean hasSideRemark() {
            return null != sideRemark;
        }
    }
}
