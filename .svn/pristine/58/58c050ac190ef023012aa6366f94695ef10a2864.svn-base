package com.fcgo.weixin.interfaces;

import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.fcgo.weixin.common.log.LogCategory;

public abstract class AbstractBaseController {

    protected Log logger = LogFactory.getLog(LogCategory.CONTROLLER.toString());

    protected static final String ERROR_KEY = "errors";

    protected static final String CODE_ERROR_KEY = "code";

    protected static final Locale DEFAULT_LOCALE = Locale.ENGLISH;

    protected static final String FILE_NAME_ILLAGEL_STRING_REGEX = "[/\\\\:*?\"<>\\|]";

    protected static final String URL_MATCHER_REGEX = "(http://)?([^/]*)(/?.*)";

    /**
     * 使用redirect跳转到指定的请求上
     * 
     * @param URI 指定的请求链接
     * @return
     */
    protected String redirect(String URI) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("redirect:");
        stringBuilder.append(URI);
        return stringBuilder.toString();
    }

    /**
     * 使用forward跳转到指定的请求上
     * 
     * @param URI 指定的请求链接
     * @return
     */
    protected String forward(String URI) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("forward:");
        stringBuilder.append(URI);
        return stringBuilder.toString();
    }

    /**
     * 获取Referer
     * 
     * @param headers
     * @return
     */
    protected String getReferer(HttpHeaders headers) {
        return headers.getFirst("Referer");
    }

    /**
     * 获取域名
     * 
     * @param headers
     * @return
     */
    protected String getHost(HttpHeaders headers) {
        return headers.getFirst("Host");
    }

    /**
     * 获取RefererURI
     * 
     * @param headers
     * @return
     * @author wangjinping
     */
    protected String getRefererURI(HttpHeaders headers) {
        String referer = getReferer(headers);
        if (referer == null) {
            return null;
        }
        Pattern urlPattern = Pattern.compile(URL_MATCHER_REGEX);
        Matcher urlMatcher = urlPattern.matcher(referer);
        if (urlMatcher.matches()) {
            return urlMatcher.group(3);
        }
        else {
            return StringUtils.EMPTY;
        }
    }

    /**
     * 获取域名
     * 
     * @param headers
     * @return
     */
    protected String getHost(String url) {
        Pattern urlPattern = Pattern.compile(URL_MATCHER_REGEX);
        Matcher urlMatcher = urlPattern.matcher(url);
        if (urlMatcher.matches()) {
            return urlMatcher.group(2);
        }
        else {
            return StringUtils.EMPTY;
        }
    }

    /**
     * 获取协议
     * 
     * @param headers
     * @return
     */
    protected String getProtocol(String url) {
        Pattern urlPattern = Pattern.compile(URL_MATCHER_REGEX);
        Matcher urlMatcher = urlPattern.matcher(url);
        if (urlMatcher.matches()) {
            return urlMatcher.group(1);
        }
        else {
            return StringUtils.EMPTY;
        }
    }

    /**
     * flash ok 和前端#flashOk宏配合使用
     * 
     * @param model
     * @param message
     */
    protected void flashOk(RedirectAttributes model, String message) {
        model.addFlashAttribute("ok", message);
    }

    /**
     * flash error 和前端#flashError宏配合使用
     * 
     * @param model
     * @param message
     */
    protected void flashError(RedirectAttributes model, String message) {
        model.addFlashAttribute("error", message);
    }

    /**
     * 输出指定文件的数据流（即文件下载或图片显示功能）。
     * 
     * @param contentType 文件类型。如果为空，则使用：application/octet-stream
     * @param fileName 文件名称。如果为空，则使用系统随机命名，后缀为“.file”
     * @param disposition 文件时由浏览器打开还是操作系统打开，即inline与attachment
     * @param content 文件内容。如果为空，则不作任何处理。
     * @param response 客户端响应
     * @throws Exception
     */
    protected void download(String contentType, String fileName, String disposition, byte[] content,
            HttpServletResponse response) throws Exception {
        if ((content != null) && (content.length > 0)) {
            contentType = StringUtils.defaultIfEmpty(contentType, "application/octet-stream");
            fileName = StringUtils.defaultIfEmpty(fileName, "tmp_" + String.valueOf(System.nanoTime()) + ".file");
            if (!"inline".equals(disposition) && !"attachment".equals(disposition)) {
                disposition = "attachment";
            }
            ServletOutputStream out = null;
            try {
                response.setContentType(contentType);
                response.setHeader("Content-Disposition", disposition
                        + ";filename=\""
                        + new String(replaceFileIllegalStr(fileName, "_").replaceAll(";", "_").getBytes("GBK"),
                                "ISO-8859-1") + "\"");
                out = response.getOutputStream();
                out.write(content, 0, content.length);
            }
            catch (Exception e) {
                throw e;
            }
            finally {
                if (out != null) {
                    out.close();
                }
            }
        }
    }

    /**
     * 处理文件名称非法字符
     * 
     * @param fileName
     * @param replaceStr
     * @return
     */
    private static String replaceFileIllegalStr(String fileName, String replaceStr) {
        if (StringUtils.isEmpty(fileName)) {
            return fileName;
        }
        if (StringUtils.isEmpty(replaceStr)) {
            replaceStr = "";
        }
        return fileName.replaceAll(FILE_NAME_ILLAGEL_STRING_REGEX, replaceStr);
    }

}
