package com.fcgo.weixin.controller.order;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fcgo.weixin.application.dto.OrderConfirmDetailDTO;
import com.fcgo.weixin.application.dto.OrderConfirmProductDTO;
import com.fcgo.weixin.application.order.PlaceOrderService;
import com.fcgo.weixin.application.shop.SellerShopService;
import com.fcgo.weixin.application.user.UserAddressService;
import com.fcgo.weixin.common.dto.BaseSessionUserDTO;
import com.fcgo.weixin.common.util.HttpSessionProvider;
import com.fcgo.weixin.persist.po.SellerShopPO;
import com.fcgo.weixin.persist.po.UserAddressPO;

/**
 * 下单
 * 
 * @author xiahanxzh
 */
@Controller
@RequestMapping("/uc/placeOrder")
public class PlaceOrderInfoController {
    @Autowired
    private PlaceOrderService placeOrderService;

    @Autowired
    private UserAddressService userAddressService;

    @Autowired
    private SellerShopService sellerShopService;

    @RequestMapping(value = "/confirmOrder")
    public String confirmOrder(Model model, HttpSession session, HttpServletRequest request,
            HttpServletResponse response, String productInfoJson, @RequestHeader HttpHeaders headers) {
        BaseSessionUserDTO baseSessionUserDTO =
                (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
        List<OrderConfirmDetailDTO> orderConfirmDetailDTOList = new ArrayList<OrderConfirmDetailDTO>();
        JSONArray jsonArray = JSONArray.fromObject(productInfoJson);
        for (int i = 0; i < jsonArray.size(); i++) {
            OrderConfirmDetailDTO orderConfirmDetailDTO = new OrderConfirmDetailDTO();
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            int sellerId = Integer.parseInt(jsonObject.get("sellerId").toString());
            List<OrderConfirmProductDTO> orderConfirmProductDTOs =
                    placeOrderService.resolveProductInfoJson(productInfoJson);
            orderConfirmDetailDTO.setSellerId(sellerId);
            SellerShopPO sellerShopPO = sellerShopService.findByParam(null, Integer.valueOf(sellerId).toString());
            orderConfirmDetailDTO.setShopName(sellerShopPO.getShopName());
            orderConfirmDetailDTO.setSellerId(sellerShopPO.getId());
            orderConfirmDetailDTO.setOrderConfirmProductDTOs(orderConfirmProductDTOs);
            orderConfirmDetailDTOList.add(orderConfirmDetailDTO);
        }
        UserAddressPO userAddressPO = userAddressService.findDefaultByUserId(baseSessionUserDTO.getUserId());
        model.addAttribute("userAddressPO", userAddressPO);
        model.addAttribute("productInfoJson", productInfoJson);
        model.addAttribute("refer", headers.getFirst("Referer"));
        // 订单总价
        model.addAttribute("orderProductPrice", placeOrderService.getOrderTotalMoney(orderConfirmDetailDTOList));
        model.addAttribute("orderTotalFreight", placeOrderService.getOrderTotalFreight(orderConfirmDetailDTOList));
        model.addAttribute(
                "orderTotalPrice",
                placeOrderService.getOrderTotalMoney(orderConfirmDetailDTOList).add(
                        placeOrderService.getOrderTotalFreight(orderConfirmDetailDTOList)));
        return "/order/confirmOrder";

    }

    @RequestMapping(value = "/saveOrder")
    public String saveOrder(Model model, HttpSession session, HttpServletRequest request, HttpServletResponse response,
            String productInfoJson, String addressId) {
        BaseSessionUserDTO baseSessionUserDTO =
                (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
        List<OrderConfirmProductDTO> orderConfirmProductDTOs =
                placeOrderService.resolveProductInfoJson(productInfoJson);
        UserAddressPO userAddressPO = userAddressService.findById(Integer.valueOf(addressId));
        placeOrderService.placeOrder(null, baseSessionUserDTO, userAddressPO);
        return productInfoJson;
    }
}
