package com.fcgo.weixin.controller.product;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.fcgo.weixin.application.product.IProductGroupService;
import com.fcgo.weixin.application.product.IProductImageService;
import com.fcgo.weixin.application.product.IProductService;
import com.fcgo.weixin.application.product.IProductSpecService;
import com.fcgo.weixin.common.constants.ProductSource;
import com.fcgo.weixin.common.dto.BaseSessionUserDTO;
import com.fcgo.weixin.common.dto.Page;
import com.fcgo.weixin.common.util.HttpSessionProvider;
import com.fcgo.weixin.controller.product.convert.ProductConvert;
import com.fcgo.weixin.dto.ProductDTO;
import com.fcgo.weixin.dto.ProductSpecDTO;
import com.fcgo.weixin.persist.po.ProductGroupPO;
import com.fcgo.weixin.persist.po.ProductPO;
import com.fcgo.weixin.persist.po.ProductSpecPO;

/**
* @ClassName: PdtProductSellerController 
* @Description: 需要登录的product
* @author zhonghui.geng
* @date 2017年4月7日 下午4:39:20 
*
 */
@Controller
@RequestMapping("/uc/product")
public class PdtProductSellerController {
    @Autowired
    private IProductService productService;
    @Autowired
    private IProductImageService productImageService;
    @Autowired
    private IProductSpecService productSpecService;
    @Autowired
    private IProductGroupService productGroupService;
    @Autowired
    private ProductConvert productConvert;

    
    
    /**
    * @Title: preAddProduct 
    * @Description:pre添加商品
    * @param @param source
    * @param @return    参数 商品来源
    * @return  Map<String,Object>  返回类型
    * @throws
     */
    @RequestMapping(value="/preAddProduct",method = RequestMethod.GET)
    public String preAddProduct(Integer source, Model model, HttpServletRequest request, HttpServletResponse response) {
        BaseSessionUserDTO baseSessionUserDTO =
                (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
        if(baseSessionUserDTO==null){
            return null;
        }
        //自营
       if(ProductSource.SELFSALE.getKey()==source){
           List<ProductGroupPO> groupList = productGroupService.findByShopId(baseSessionUserDTO.getShopId());
           model.addAttribute("groupList", groupList);
           return "/product/sellerAddGoods";
       }
       //平台
       if(ProductSource.PLATFORMSALE.getKey()==source){
           
       }
        return "";

    }
    
    /**
     * @Title: addSelfProduct 
     * @Description:添加自营商品
     * @param @param source
     * @param @return    参数 商品数据
     * @return  Map<String,Object>  返回类型
     * @throws
      */
     @RequestMapping("/addSelfProduct")
     public String addSelfProduct(ProductDTO product, MultipartFile pic1File,MultipartFile pic2File,Model model, HttpServletRequest request, HttpServletResponse response) {
         BaseSessionUserDTO baseSessionUserDTO =
                 (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
         if(baseSessionUserDTO==null){
             return null;
         }
         ProductPO pro =productConvert.convertToDomain(product);
         pro.setCreateName(baseSessionUserDTO.getNickName());
         pro.setUpdateName(baseSessionUserDTO.getNickName());
         pro.setSellerId(baseSessionUserDTO.getUserId());
         pro.setShopId(baseSessionUserDTO.getShopId());
         List<ProductSpecDTO> specList =product.getSepcList();
         List<ProductSpecPO> spList=  new ArrayList<ProductSpecPO>();
         for (ProductSpecDTO productSpecDTO : specList) {
             ProductSpecPO p = new ProductSpecPO();
             p.setSpecName(productSpecDTO.getSpecName());
             p.setStock(productSpecDTO.getStock());
             p.setSalesPrice(productSpecDTO.getSalesPrice());
             spList.add(p);
        }
         int i = productService.addProduct(pro,pic1File,pic1File,spList);
         if(i>0){
             return "/product/list";
         }
         return null;

     }
     /**
      * @Title: addPlatFormProduct 
      * @Description:添加平台商品
      * @param @param source
      * @param @return    参数 商品数据
      * @return  Map<String,Object>  返回类型
      * @throws
       */
      @RequestMapping("/addPlatFormProduct")
      public String addPlatFormProduct(ProductDTO product, Model model, HttpServletRequest request, HttpServletResponse response) {
          BaseSessionUserDTO baseSessionUserDTO =
                  (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
          if(baseSessionUserDTO==null){
              return null;
          }
          return "";

      }
      
      /**
       * @Title: addSelfProduct 
       * @Description:添加自营商品
       * @param @param source
       * @param @return    参数 商品数据
       * @return  Map<String,Object>  返回类型
       * @throws
        */
       @RequestMapping("/updateSelfProduct")
       public String updateSelfProduct(ProductDTO product, MultipartFile pic1File,MultipartFile pic2File,Model model, HttpServletRequest request, HttpServletResponse response) {
           BaseSessionUserDTO baseSessionUserDTO =
                   (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
           if(baseSessionUserDTO==null){
               return null;
           }
           ProductPO pro =productConvert.convertToDomain(product);
           pro.setUpdateName(baseSessionUserDTO.getNickName());
           pro.setSellerId(baseSessionUserDTO.getUserId());
           pro.setShopId(baseSessionUserDTO.getShopId());
           List<ProductSpecDTO> specList =product.getSepcList();
           List<ProductSpecPO> spList=  new ArrayList<ProductSpecPO>();
           for (ProductSpecDTO productSpecDTO : specList) {
               ProductSpecPO p = new ProductSpecPO();
               p.setSpecName(productSpecDTO.getSpecName());
               p.setStock(productSpecDTO.getStock());
               p.setSalesPrice(productSpecDTO.getSalesPrice());
               spList.add(p);
          }
           int i = productService.updateSelfProduct(pro,pic1File,pic1File,spList);
           if(i>0){
               return "/product/list";
           }
           return null;

       }
       
       
       /**
       * @Title: upStateUpdate 
       * @Description: 上架 下架
       * @param @param productId 商品ID state  状态
       * @param @return    参数
       * @return  String  返回类型
       * @throws
        */
        @RequestMapping("/upStateUpdate")
        public String upStateUpdate(Integer productId,Integer state, HttpServletRequest request, HttpServletResponse response) {
            BaseSessionUserDTO baseSessionUserDTO =
                    (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
            ProductPO product = new ProductPO();
            product.setId(productId);
            product.setUpdateTime(new Date());
            product.setUpState(state);
            product.setUpdateName(baseSessionUserDTO.getNickName());
            int i = productService.upStateUpdate(product);
            if(i>0){
                return "/product/list";
            }
            return null;

        }
        
        
        /**
        * @Title: upStateUpdate 
        * @Description: 上架 下架
        * @param @param productId 商品ID state  状态
        * @param @return    参数
        * @return  String  返回类型
        * @throws
         */
         @RequestMapping("/changeProductGroup")
         public String changeProductGroup(Integer productId,List<Integer> groupId, HttpServletRequest request, HttpServletResponse response) {
//             BaseSessionUserDTO baseSessionUserDTO =
//                     (BaseSessionUserDTO) HttpSessionProvider.getAttribute(request, "session_attr_user");
//             ProductPO product = new ProductPO();
//             product.setId(productId);
//             product.setUpdateTime(new Date());
//             product.setUpState(state);
//             product.setUpdateName(baseSessionUserDTO.getNickName());
//             int i = productService.upStateUpdate(product);
//             if(i>0){
//                 return "/product/list";
//             }
             return null;

         }
         
         /**
         * @Description: 卖家看到的商品列表
         * @param @param upstate 上下架状态
         * @param @return    参数
         * @return  String  返回类型
         * @throws
          */
           @RequestMapping("/mylist")
           public @ResponseBody Map mylist(ProductPO product,String pageIndex, HttpServletRequest request, HttpServletResponse response) {
               Map result = new HashMap();
               Page page = new Page();
               if (pageIndex == null || pageIndex == "") {
                   pageIndex = "1";
               }
               page.setPageIndex(Integer.valueOf(pageIndex));
               List<ProductPO> products = productService.findProductList(product, page);
               result.put("products", products);
               result.put("totalCount", productService.countProductList(product));
               return result;

           }
}
